<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[cornerkick's 唠叨]]></title>
  <link href="http://cornerkick.github.io/atom.xml" rel="self"/>
  <link href="http://cornerkick.github.io/"/>
  <updated>2014-11-26T11:15:00+08:00</updated>
  <id>http://cornerkick.github.io/</id>
  <author>
    <name><![CDATA[cornerkick]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JQuery 小结]]></title>
    <link href="http://cornerkick.github.io/blog/2014/11/20/jquery-xiao-jie/"/>
    <updated>2014-11-20T16:12:25+08:00</updated>
    <id>http://cornerkick.github.io/blog/2014/11/20/jquery-xiao-jie</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p><code>JQuery</code>相比于原生的<code>javascript</code>，提供了更简洁，优美的函数接口用来操作dom，实现ajax功能。并且屏蔽了大多数主流浏览器的差异性，方法了开发。</p>

<h2>Part 1       find what you want to</h2>

<p>JQuery为我们提供了money，哦不<code>$函数</code>来选择我们需要的dom元素。<code>$函数</code>的接受string做为输入，返回一个<code>JQuery collection</code>。</p>

<p>一般的用法是，</p>

<pre><code>$('tag-name') 返回页面中所有的相关tag
$('.class-name') 同理
$('#id-name')   
</code></pre>

<p><code>dom</code>其实就是数据结构中的<code>树结构</code>，JQuery还提供给我们一些十分简洁的方法来在树中遍历<code>traverse</code>，并且这些方法的命名和接口十分规律统一。</p>

<pre><code>parent() 返回选中元素的直接父母
parents() 返回选中元素的祖先，即父母的父母

slibings() 返回选中元素的兄弟，级具有相同父母的元素
next()       下一个兄弟

children() 返回选中元素之间孩子，不包括孙子
find() 所有后代
</code></pre>

<p>其中<code>parents</code>和<code>find</code>方法可以传入class,id,tag起到<code>filter</code>的作用，及直接在返回的<code>JQuery collection</code>中找到所需元素。</p>

<h4>小TIP</h4>

<p>使用JQuery选择具有多个class的块，如<code>&lt;div class="a b"&gt;&lt;/div&gt;</code>，则<code>$('.a.b')</code>.</p>

<h2>Part 2 Manipulate what you find</h2>

<h4>一些常用的方法。</h4>

<ul>
<li><code>toggleClass(someClass)</code>为如果元素没有someClass，则加上，如果有，则去除对应的someClass</li>
<li><code>attr(optional)</code> 在没有参数的时候是一个getter，传入参数后是一个setter。用来获取或操纵所选dom元素的属性，如href，src等等</li>
<li><code>text(optional)</code>,    <code>html(optional)</code>获取元素<strong>内部</strong>的text或html内容，和上个方法一样，传入参数后就是设置相应的内容</li>
</ul>


<h4>关于对减少元素的方法</h4>

<ul>
<li><code>remove(something)</code></li>
</ul>


<h4>对dom树中增加元素的方法</h4>

<ul>
<li><code>a.append(something)</code>: something变成了a的第最后孩子，可以类比<code>a.prepend(something)</code>, something变成了a的第一个孩子。</li>
<li>增加兄弟的方法<code>insertAfter()</code>, <code>insertBefore()</code></li>
</ul>


<h2>最后</h2>

<p>关于处理用户的各种事件，dom元素消失，出现的各种效果，都可以参考<a href="http://www.w3schools.com/jquery/jquery_events.asp">W3school的教程</a>。不仅有简洁而直白的介绍，还有可以直接体验的例子。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lambda Versus Proc]]></title>
    <link href="http://cornerkick.github.io/blog/2014/11/05/ruby-block-notes/"/>
    <updated>2014-11-05T21:46:51+08:00</updated>
    <id>http://cornerkick.github.io/blog/2014/11/05/ruby-block-notes</id>
    <content type="html"><![CDATA[<h2>Ruby lambda vs Proc的区别</h2>

<p>Lambda和Proc对象基本功能用法一样，都是Ruby中用来保存一段代码的变量。</p>

<h3>只有2个区别：</h3>

<ol>
<li>lambda检查传入参赛的个数</li>
<li>当lambda返回的时候，他会把控制权交还给调用他的函数，而Proc则会直接跳出那个函数</li>
</ol>


<p>代码，来自codecademy</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">batman_ironman_proc</span>
</span><span class='line'>  <span class="n">victor</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="k">return</span> <span class="s2">&quot;Batman will win!&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">victor</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>  <span class="s2">&quot;Iron Man will win!&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">batman_ironman_proc</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">batman_ironman_lambda</span>
</span><span class='line'>  <span class="n">victor</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="k">return</span> <span class="s2">&quot;Batman will win!&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">victor</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>  <span class="s2">&quot;Iron Man will win!&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">batman_ironman_lambda</span>
</span></code></pre></td></tr></table></div></figure>


<h4>控制台的结果</h4>

<p>Batman will win! <br>
Iron Man will win!</p>

<h2>Ruby block的小习题</h2>

<p><code>crew</code>包含是一个团队各个职位员工姓名的信息的<code>hash</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">crew</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="ss">captain</span><span class="p">:</span> <span class="s2">&quot;Picard&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="n">first_officer</span><span class="p">:</span> <span class="s2">&quot;Riker&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="n">lt_cdr</span><span class="p">:</span> <span class="s2">&quot;Data&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">lt</span><span class="p">:</span> <span class="s2">&quot;Worf&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">ensign</span><span class="p">:</span> <span class="s2">&quot;Ro&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">counselor</span><span class="p">:</span> <span class="s2">&quot;Troi&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="n">chief_engineer</span><span class="p">:</span> <span class="s2">&quot;LaForge&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">doctor</span><span class="p">:</span>  <span class="s2">&quot;Crusher&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在需要过滤掉名字首字母不在A－M的人员。<br>
<strong>Solution</strong>：<br>
根据Ruby的<code>hash</code>对象提供的<code>select</code>函数接口，我们需要传入判断规则的语句。</p>

<p><code>`
由于</code>select<code>函数需要传入两个</code>block parameters<code>即</code>|key, value|`，我们将该用一个lambda保存，即：</p>

<pre><code>before_M = lambda { |key, value| value[0] &lt; 'M' } 
</code></pre>

<p>最后将其传入crew的select方法，即<code>A_to_M = crew.select(&amp;before_M)</code></p>

<h2>一点心得</h2>

<p>ruby中的block是对逻辑或者数据动作的封装，方便程序代码的data和behavior分离，降低了代码的耦合度。配合ruby的<code>list</code>, <code>hash</code>提供的<code>map</code>，<code>each</code>等接口，发挥了函数式编程的特点，避免的大量的for循环。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Post]]></title>
    <link href="http://cornerkick.github.io/blog/2014/04/27/first-post/"/>
    <updated>2014-04-27T13:21:42+08:00</updated>
    <id>http://cornerkick.github.io/blog/2014/04/27/first-post</id>
    <content type="html"><![CDATA[<h2>我的第一个博客</h2>

<h3>Hi octopress and github, this is cornerkick speaking.</h3>
]]></content>
  </entry>
  
</feed>
